import asyncio
from datetime import datetime
from pathlib import Path

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command, CommandObject
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, FSInputFile
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from sqlalchemy import select
from sqlalchemy.orm import joinedload

from app.core.config import settings
from app.core.database import get_db
from app.models import Exam, Student, Curator, Telegram
from app.services.curator import CuratorService
from app.services.student import StudentService
from app.services.exam import ExamService
from app.core.logger import logger

bot = Bot(token=settings.BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
scheduler = AsyncIOScheduler()


class RegistrationStates(StatesGroup):
    """
    –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞.

    –°–æ—Å—Ç–æ—è–Ω–∏—è:
    - fio: –í–≤–æ–¥ –§–ò–û
    - pwd: –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è
    - student_id: –•—Ä–∞–Ω–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞
    - fio_prompt_msg_id: –•—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π –æ —Ñ–æ—Ä–º–∞—Ç–µ –§–ò–û
    """
    choosing_role = State()
    fio = State()
    pwd = State()
    user_id = State()
    fio_prompt_msg_id = State()
    login = State()
    password = State()
    start_data = State()

bot_dir = Path(__file__).parent.resolve()


def validate_fio(fio: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –§–ò–û.

    Args:
        fio: –í–≤–µ–¥—ë–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –§–ò–û

    Returns:
        bool: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (True, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π)
    """
    return len(fio.split()) == 3


async def send_exam_reminders():
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —ç–∫–∑–∞–º–µ–Ω–∞—Ö –∏–ª–∏ –∑–∞—á—ë—Ç–∞—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞–º.

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 1 –∏ 3 –¥–Ω—è –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.
    """
    try:
        today = datetime.now().date()
        logger.info("[–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø] –ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± —ç–∫–∑–∞–º–µ–Ω–∞—Ö/–∑–∞—á—ë—Ç–∞—Ö")

        async for db in get_db():
            exams = await db.execute(
                select(Exam)
                .options(joinedload(Exam.curator))
                .where(Exam.holding_date >= today.strftime("%Y-%m-%d"))
            )
            exams = exams.scalars().all()

            for exam in exams:
                try:
                    exam_date = datetime.strptime(exam.holding_date, "%Y-%m-%d").date()
                    curator_fio = f"{exam.curator.last_name} {exam.curator.first_name} {exam.curator.patronymic or ''}".strip()
                    days_left = (exam_date - today).days

                    if days_left in [1, 3]:
                        when_text = "–∑–∞–≤—Ç—Ä–∞" if days_left == 1 else "—á–µ—Ä–µ–∑ 3 –¥–Ω—è"
                        exam_type = "–≠–∫–∑–∞–º–µ–Ω" if exam.type.lower() == "exam" else "–ó–∞—á—ë—Ç"

                        telegram_ids = await ExamService.get_telegram_ids_by_exam_id(exam.id, db)

                        for tg_id in telegram_ids:
                            try:
                                await bot.send_message(
                                    chat_id=tg_id,
                                    text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
                                         f"üìö {exam_type} –ø–æ <b>{exam.discipline}</b> {when_text}!\n"
                                         f"üìÖ –î–∞—Ç–∞: {exam.holding_date}\n"
                                         f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {curator_fio}"
                                )
                                logger.info(f"[–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø] –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {tg_id} | {exam.discipline}")
                                await asyncio.sleep(10)
                            except TelegramBadRequest as e:
                                logger.warning(f"[–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {e}")
                except ValueError as e:
                    logger.error(f"[–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø] –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã –¥–ª—è —ç–∫–∑–∞–º–µ–Ω–∞ ID {exam.id}: {e}")
                except Exception as e:
                    logger.error(f"[–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

    except Exception as e:
        logger.error(f"[–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")


async def notify_students_about_exam_link(exam_id: int, link: str):
    """
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –æ –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–µ –Ω–∞ —ç–∫–∑–∞–º–µ–Ω/–∑–∞—á—ë—Ç.

    Args:
        exam_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —ç–∫–∑–∞–º–µ–Ω–∞
        link: –°—Å—ã–ª–∫–∞ –Ω–∞ –±–∏–ª–µ—Ç
    """
    try:
        async for db in get_db():
            telegram_ids = await ExamService.get_telegram_ids_by_exam_id(exam_id, db)
            exam = await ExamService.get_exam_details(exam_id, db)
            break

        if not exam:
            logger.warning(f"[–£–í–ï–î–û–ú–õ–ï–ù–ò–Ø] –≠–∫–∑–∞–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: ID {exam_id}")
            return

        curator_fio = f"{exam.curator.last_name} {exam.curator.first_name} {exam.curator.patronymic or ''}".strip()
        discipline = exam.discipline
        holding_date = exam.holding_date
        exam_type = "–≠–∫–∑–∞–º–µ–Ω" if exam.type.lower() == "exam" else "–ó–∞—á—ë—Ç"

        message_text = (
            f"üì¢ <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n\n"
            f"üìö {exam_type} –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ <b>{discipline}</b>\n"
            f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: <b>{curator_fio}</b>\n"
            f"üìÖ –î–∞—Ç–∞: <b>{holding_date}</b>\n\n"
            f"üé´ –ë—ã–ª –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω –±–∏–ª–µ—Ç.\n\n"
            f"üçÄ –£–¥–∞—á–∏ –Ω–∞ {exam_type.lower()}–µ! üí™"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –±–∏–ª–µ—Ç", url=link)]
        ])

        for tg_id in telegram_ids:
            try:
                await bot.send_message(chat_id=tg_id, text=message_text, reply_markup=keyboard)
                logger.info(f"[–£–í–ï–î–û–ú–õ–ï–ù–ò–Ø] –ë–∏–ª–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {tg_id} | {discipline}")
                await asyncio.sleep(10)
            except TelegramBadRequest as e:
                logger.warning(f"[–£–í–ï–î–û–ú–õ–ï–ù–ò–Ø] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {e}")

    except Exception as e:
        logger.error(f"[–£–í–ï–î–û–ú–õ–ï–ù–ò–Ø] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")


async def notify_students_about_exam_creation(exam_id: int):
    """
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–∞–º–µ–Ω–∞ –∏–ª–∏ –∑–∞—á—ë—Ç–∞.

    Args:
        exam_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —ç–∫–∑–∞–º–µ–Ω–∞ –∏–ª–∏ –∑–∞—á—ë—Ç–∞
    """
    try:
        async for db in get_db():
            telegram_ids = await ExamService.get_telegram_ids_by_exam_id(exam_id, db)
            exam = await ExamService.get_exam_details(exam_id, db)
            break

        if not exam:
            logger.warning(f"[–£–í–ï–î–û–ú–õ–ï–ù–ò–Ø] –≠–∫–∑–∞–º–µ–Ω/–∑–∞—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ID {exam_id}")
            return

        curator_fio = f"{exam.curator.last_name} {exam.curator.first_name} {exam.curator.patronymic or ''}".strip()
        discipline = exam.discipline
        holding_date = exam.holding_date
        exam_type = "–≠–∫–∑–∞–º–µ–Ω" if exam.type.lower() == "exam" else "–ó–∞—á—ë—Ç"

        message_text = (
            f"üÜï <b>–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π {exam_type.lower()}!</b>\n\n"
            f"üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: <b>{discipline}</b>\n"
            f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: <b>{curator_fio}</b>\n"
            f"üìÖ –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: <b>{holding_date}</b>\n\n"
            f"üìå –ü—Ä–æ–≤–µ—Ä—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤—å—Å—è –∑–∞—Ä–∞–Ω–µ–µ!"
        )

        for tg_id in telegram_ids:
            try:
                await bot.send_message(chat_id=tg_id, text=message_text)
                logger.info(f"[–£–í–ï–î–û–ú–õ–ï–ù–ò–Ø] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {tg_id} | {discipline}")
                await asyncio.sleep(10)
            except TelegramBadRequest as e:
                logger.warning(f"[–£–í–ï–î–û–ú–õ–ï–ù–ò–Ø] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {e}")

    except Exception as e:
        logger.error(f"[–£–í–ï–î–û–ú–õ–ï–ù–ò–Ø] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–∞–º–µ–Ω–∞/–∑–∞—á—ë—Ç–∞: {e}")


async def notify_student_mark(student_id: int, exam_name: str, mark: int | None):
    """
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–ª–∏ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–µ.

    Args:
        student_id: ID —Å—Ç—É–¥–µ–Ω—Ç–∞
        exam_name: –ù–∞–∑–≤–∞–Ω–∏–µ —ç–∫–∑–∞–º–µ–Ω–∞/–¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
        mark: –û—Ü–µ–Ω–∫–∞ (None –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
    """
    try:
        async for db in get_db():
            result = await db.execute(
                select(Student)
                .options(joinedload(Student.telegram))
                .where(Student.id == student_id)
            )
            student = result.scalars().first()
            break

        if not student or not student.telegram or not student.telegram.telegram_id:
            logger.warning(f"[–£–í–ï–î–û–ú–õ–ï–ù–ò–ï] Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ ID {student_id}")
            return

        tg_id = student.telegram.telegram_id
        mark_text = str(mark) if mark is not None else "–Ω/–∞"

        text = (
            f"üéì –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É <b>{exam_name}</b> –æ–±–Ω–æ–≤–ª–µ–Ω–∞:\n"
            f"‚≠ê –û—Ü–µ–Ω–∫–∞: <b>{mark_text}</b>"
        )

        await bot.send_message(chat_id=tg_id, text=text)
        logger.info(f"[–£–í–ï–î–û–ú–õ–ï–ù–ò–ï] –û—Ü–µ–Ω–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç—É ID {student_id}")

    except TelegramBadRequest as e:
        logger.warning(f"[–£–í–ï–î–û–ú–õ–ï–ù–ò–ï] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç—É {student_id}: {e}")
    except Exception as e:
        logger.error(f"[–£–í–ï–î–û–ú–õ–ï–ù–ò–ï] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç—É {student_id}: {e}")


async def send_welcome_photo(user, state: FSMContext):
    await state.clear()

    async for db in get_db():
        telegram_id = user.from_user.id

        result = await db.execute(select(Telegram.telegram_id))
        all_tg_ids = result.scalars().all()

        if telegram_id in all_tg_ids:
            await user.answer("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
            return


    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéì –°—Ç—É–¥–µ–Ω—Ç", callback_data="role_student"),
         InlineKeyboardButton(text="üë®‚Äçüè´ –ö—É—Ä–∞—Ç–æ—Ä", callback_data="role_curator")]
    ])
    photo = FSInputFile(bot_dir / "logo.png")
    await user.answer_photo(
        photo=photo,
        caption=(
            f"üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <u>–ù–∞–≤–∏–≥–∞—Ç–æ—Ä –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π –ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ –∫–æ—Ä–ø—É—Å–∞ –£–≥—Ä–µ—à–∞</u>, {user.from_user.first_name}</b>! üåü\n\n"
            "üìö –ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.\n\n"
            "üôã‚Äç‚ôÇÔ∏èüôã‚Äç‚ôÄÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:"
        ),
        reply_markup=keyboard
    )
    await state.set_state(RegistrationStates.choosing_role)


@dp.message(Command("start"))
async def start_command(message: Message, state: FSMContext, command: CommandObject):
    await send_welcome_photo(message, state)

@dp.callback_query(F.data == "menu")
async def menu_handler(callback: CallbackQuery, state: FSMContext):
    await send_welcome_photo(callback.message, state)
    await callback.answer()

@dp.callback_query(F.data.startswith("role_"))
async def choose_role(callback: CallbackQuery, state: FSMContext):
    role = callback.data.split("_")[1]
    await state.update_data(role=role)
    await state.set_state(RegistrationStates.fio)
    msg = await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á)")
    await state.update_data(fio_prompt_msg_id=msg.message_id)
    await callback.answer()

@dp.message(RegistrationStates.fio)
async def fio_handler(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –§–ò–û —Å—Ç—É–¥–µ–Ω—Ç–∞.

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–≤–µ–¥—ë–Ω–Ω—ã–º –§–ò–û
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
    """
    fio_input = message.text.strip()
    logger.info(f"[–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø] –ü–æ–ª—É—á–µ–Ω–æ –§–ò–û: {fio_input} | {message.from_user.id}")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu")]
    ])

    if not validate_fio(fio_input):
        await message.answer("<b>‚ùå –§–ò–û –Ω–∞–±—Ä–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ</b>. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–Ω–æ–≤–∞.\n\n"
                             "<b>‚ùì –ß—Ç–æ –Ω–µ —Ç–∞–∫?</b>\n"
                             "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n\n"
                             "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                             "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n\n"
                             "üí° <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞</b>, –≤–≤–æ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –æ—à–∏–±–æ–∫, <b>—á—Ç–æ–±—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>",
                             reply_markup=keyboard
                             )
        return

    split_fio = fio_input.split()
    await state.update_data(fio=fio_input.lower())

    data = await state.get_data()
    prompt_msg_id = data.get("fio_prompt_msg_id")

    if prompt_msg_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=prompt_msg_id)
        except Exception as e:
            logger.warning(f"[–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –æ –§–ò–û: {e}")


    try:
        role = data.get("role")
        async for db in get_db():
            if role == "student":
                user = await StudentService.get_student_by_fio(split_fio[1], split_fio[0], split_fio[2], db)
            else:
                user = await CuratorService.get_curator_by_fio(split_fio[1], split_fio[0], split_fio[2], db)
            await state.update_data(user_id=user.id)

        await state.set_state(RegistrationStates.pwd)
        await message.answer("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞):")

    except Exception as e:
        logger.error(f"[–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞: {e}")
        await message.answer("‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –§–ò–û –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@dp.message(RegistrationStates.pwd)
async def pwd_handler(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞.

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
    """
    password = message.text.strip()
    logger.info(f"[–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø] –ü–æ–ª—É—á–µ–Ω –ø–∞—Ä–æ–ª—å –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ | {message.from_user.id}")

    if len(password) < 4:
        await message.answer("‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 4 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    data = await state.get_data()
    role = data.get("role")
    user_id = data.get("user_id")
    login = None

    try:
        async for db in get_db():
            if role == "student":
                student = await StudentService.set_student_password_and_telegram(
                    student_id=user_id,
                    password=password,
                    telegram_id=message.from_user.id,
                    db=db
                )
                login = student.login
            else:
                curator = await CuratorService.set_curator_password_and_telegram(
                    curator_id=user_id,
                    password=password,
                    telegram_id=message.from_user.id,
                    db=db
                )
                login = curator.login

        await message.answer(
            f"üåü –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! üåü/\n\n"
            f"–ú—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º–µ. –í–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
            f"–í–∞—à –ª–æ–≥–∏–Ω: <b>{login}</b>\n"
            f"–í–∞—à –ø–∞—Ä–æ–ª—å: <tg-spoiler>{password}</tg-spoiler>",
            parse_mode=ParseMode.HTML
        )
        logger.info(f"[–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø] –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {login} | {message.from_user.id}")

    except Exception as e:
        logger.error(f"[–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø] –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await state.clear()


async def on_startup():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞."""
    try:
        logger.info("[–ë–û–¢] –ù–∞—á–∞–ª–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞")
        await send_exam_reminders()

        scheduler.add_job(
            send_exam_reminders,
            'cron',
            hour=9,
            minute=0
        )
        scheduler.start()
        logger.info("[–ë–û–¢] –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ 09:00")

    except Exception as e:
        logger.error(f"[–ë–û–¢] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")


async def main():
    """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –±–æ—Ç–∞."""
    try:
        logger.info("[–ë–û–¢] –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
        await on_startup()
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)

    except Exception as e:
        logger.critical(f"[–ë–û–¢] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()
        logger.info("[–ë–û–¢] –°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")